{
	"info": {
		"_postman_id": "3c70d2c6-d300-4777-b3c2-85b12f01e5df",
		"name": "Golang: MyAnimeList",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "32742670"
	},
	"item": [
		{
			"name": "CRUD Anime",
			"item": [
				{
					"name": "Create anime",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const token = pm.environment.get(\"token\");\r",
									"pm.request.headers.add({\r",
									"    key: \"Authorization\",\r",
									"    value: \"Bearer \" + token\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('response is ok', () => {\r",
									"\tpm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"response body contains all fields\", function () {\r",
									"    pm.response.to.have.jsonBody('anime');\r",
									"    pm.response.to.have.jsonBody('anime.id');\r",
									"    pm.response.to.have.jsonBody('anime.rating');\r",
									"    pm.response.to.have.jsonBody('anime.title');\r",
									"    pm.response.to.have.jsonBody('anime.genres');\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"rating\" : 10,\r\n    \"title\" : \"Cyberpunk Edgerunners\",\r\n    \"genres\" : \"Peakfiction\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v1/animes",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v1",
								"animes"
							]
						}
					},
					"response": []
				},
				{
					"name": "Read anime",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('response is ok', () => {\r",
									"\tpm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"response body contains all fields\", function () {\r",
									"    pm.response.to.have.jsonBody('anime');\r",
									"    pm.response.to.have.jsonBody('anime.id');\r",
									"    pm.response.to.have.jsonBody('anime.rating');\r",
									"    pm.response.to.have.jsonBody('anime.title');\r",
									"    pm.response.to.have.jsonBody('anime.genres');\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"packages": {},
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/api/v1/animes/6",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v1",
								"animes",
								"6"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update anime",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('response is ok', () => {\r",
									"\tpm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"response body contains all fields\", function () {\r",
									"    pm.response.to.have.jsonBody('anime');\r",
									"    pm.response.to.have.jsonBody('anime.id');\r",
									"    pm.response.to.have.jsonBody('anime.rating');\r",
									"    pm.response.to.have.jsonBody('anime.title');\r",
									"    pm.response.to.have.jsonBody('anime.genres');\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"packages": {},
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{   \r\n    \"title\" : \"Cyberpunk Edgerunners\",\r\n    \"rating\" : 10,\r\n    \"genres\" : \"Peakfiction,2077\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v1/animes/2",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v1",
								"animes",
								"2"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete anime",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('response is unauthorized', () => {\r",
									"\tpm.response.to.have.status(403);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const animes = pm.environment.get(\"animes\");\r",
									"const token = pm.environment.get(\"token\");\r",
									"pm.request.headers.add({\r",
									"    key: \"Authorization\",\r",
									"    value: \"Bearer \" + token\r",
									"});\r",
									"const id = animes && animes.length > 0 ? animes[0].id : 1;\r",
									"pm.variables.set(\"animeID\", id)"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v1/animes/{{id}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v1",
								"animes",
								"{{id}}"
							],
							"query": [
								{
									"key": "Authorization",
									"value": "Bearer WBQB6L5QIGEIDLINJQNJYALVQQ",
									"disabled": true
								},
								{
									"key": "id",
									"value": null,
									"disabled": true
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Authentication",
			"item": [
				{
					"name": "Register user",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const randomId = Math.random().toString(36).substring(2, 10);\r",
									"pm.environment.set(\"email\", `${randomId}@example.com`);\r",
									"pm.environment.set(\"password\", `password${randomId}`);\r",
									"pm.environment.set(\"name\", `Name-${randomId}`);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseData = pm.response.json();\r",
									"pm.environment.set(\"activationToken\", responseData.user.token);\r",
									"\r",
									"pm.environment.set(\"userID\", responseData.user.user.id);\r",
									"\r",
									"pm.test('response is ok', () => {\r",
									"\tpm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test('response should have json with activationToken', () => {\r",
									"\tconst response = pm.response.json();\r",
									"\r",
									"\t// Check that field in response\r",
									"\tpm.expect(response.user.token).to.be.string;\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\" : \"{{email}}\",\r\n    \"name\" : \"{{name}}\",\r\n    \"password\" : \"{{password}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v1/users",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v1",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Activate user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('response is ok', () => {\r",
									"\tpm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('user should be activated', () => {\r",
									"\tconst response = pm.response.json();\r",
									"\r",
									"\t// Check that field in response\r",
									"\tpm.expect(response.user.activated).to.be.true;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"token\": \"{{activationToken}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v1/users/activated",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v1",
								"users",
								"activated"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const res = pm.response.json();\r",
									"\r",
									"pm.test('response is ok', () => {\r",
									"\tpm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"const token = res.authentication_token.token;\r",
									"\r",
									"pm.test('response should have json with auth token', () => {\r",
									"\t// Check that field in response\r",
									"\tpm.expect(token).to.be.string;\r",
									"});\r",
									"\r",
									"pm.environment.set(\"token\", token);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"{{email}}\",\r\n    \"password\": \"{{password}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v1/users/login",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v1",
								"users",
								"login"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Animes",
			"item": [
				{
					"name": "Animes List",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const res = pm.response.json();\r",
									"pm.environment.set(\"animes\", res.animes);\r",
									"\r",
									"pm.test('response is ok', () => {\r",
									"\tpm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('should respond with list', () => {\r",
									"\t// Check that field in response\r",
									"\tpm.expect(res.animes).to.be.an.instanceOf(Array);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/api/v1/animes",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v1",
								"animes"
							],
							"query": [
								{
									"key": "sort",
									"value": "-rating",
									"description": "(ASC or DESC)(column name)",
									"disabled": true
								},
								{
									"key": "page_size",
									"value": "5",
									"description": "Limit",
									"disabled": true
								},
								{
									"key": "page",
									"value": "1",
									"description": "Offset by Limit",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Animes List Paginated",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.request.addQueryParams(\"page=2\");\r",
									"pm.request.addQueryParams(\"page_size=2\")\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('response is ok', () => {\r",
									"\tpm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('should respond with two items', () => {\r",
									"\tconst response = pm.response.json();\r",
									"\t// Check that field in response\r",
									"\tpm.expect(response.animes.length).to.be.eq(2);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/api/v1/animes",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v1",
								"animes"
							]
						}
					},
					"response": []
				},
				{
					"name": "Animes List Filtered",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.request.addQueryParams(\"title=Bleach\");\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('response is ok', () => {\r",
									"\tpm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('should respond with two items', () => {\r",
									"\tconst response = pm.response.json();\r",
									"\t// Check that field in response\r",
									"\tpm.expect(response.animes.length).to.be.eq(1);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/api/v1/animes",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v1",
								"animes"
							]
						}
					},
					"response": []
				},
				{
					"name": "Animes List Sorted",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.request.addQueryParams(\"sort=-rating\");\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('response is ok', () => {\r",
									"\tpm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('should be sorted descendent', () => {\r",
									"\tconst response = pm.response.json();\r",
									"\t// Check that field in response\r",
									"\tpm.expect(response.animes[0].rating > response.animes[response.animes.length - 1].rating).to.be.true;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/api/v1/animes",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v1",
								"animes"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "CRUD user anime",
			"item": [
				{
					"name": "Create user anime",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const animes = pm.environment.get(\"animes\");\r",
									"const token = pm.environment.get(\"token\");\r",
									"pm.request.headers.add({\r",
									"    key: \"Authorization\",\r",
									"    value: \"Bearer \" + token\r",
									"});\r",
									"\r",
									"if (animes && animes.length > 0) {\r",
									"    const randomIndex = Math.floor(Math.random() * animes.length);\r",
									"    const id = animes[randomIndex].id;\r",
									"    pm.variables.set(\"animeID\", id);\r",
									"} else {\r",
									"    pm.variables.set(\"animeID\", 0);\r",
									"}\r",
									"\r",
									"const randomInt = Math.floor(Math.random() * 11);\r",
									"pm.environment.set(\"randomRating\", randomInt);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseData = pm.response.json();\r",
									"pm.environment.set(\"userID\", responseData.userAnime.userID);\r",
									"pm.environment.set(\"uaID\", responseData.userAnime.id);\r",
									"\r",
									"pm.test('response is ok', () => {\r",
									"\tpm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"animeID\" : {{animeID}},\r\n    \"userID\" : {{userID}},\r\n    \"rating\" : {{randomRating}},\r\n    \"review\" : \"{{$randomCatchPhrase}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v1/user_animes",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v1",
								"user_animes"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get animes of user",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const animes = pm.environment.get(\"animes\");\r",
									"const token = pm.environment.get(\"token\");\r",
									"pm.request.headers.add({\r",
									"    key: \"Authorization\",\r",
									"    value: \"Bearer \" + token\r",
									"});\r",
									"const id = animes && animes.length > 0 ? animes[0].id : 1;\r",
									"pm.variables.set(\"id\", id)"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('response is ok', () => {\r",
									"\tpm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"userID\" : 1,\r\n    \"animeID\" : 1,\r\n    \"rating\" : 9.00,\r\n    \"review\" : \"Best anime of 2023\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v1/user_animes/user/{{userID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v1",
								"user_animes",
								"user",
								"{{userID}}"
							],
							"query": [
								{
									"key": "sort",
									"value": "-rating",
									"disabled": true
								},
								{
									"key": "page",
									"value": "2",
									"disabled": true
								},
								{
									"key": "page_size",
									"value": "2",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update user anime",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('response is ok', () => {\r",
									"\tpm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"rating\" : {{randomRating}},\r\n    \"review\" : \"{{$randomCatchPhrase}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v1/user_animes/{{uaID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v1",
								"user_animes",
								"{{uaID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete user anime",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.test('response is ok', () => {\r",
									"\tpm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"userID\" : 1,\r\n    \"animeID\" : 1,\r\n    \"rating\" : 9.00,\r\n    \"review\" : \"Best anime of 2023\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v1/user_animes/{{uaID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v1",
								"user_animes",
								"{{uaID}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "HealthCheck",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"console.log(\"pre req\")"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"console.log(\"health check test\")\r",
							"\r",
							"pm.test('server is fine', () => {\r",
							"    pm.response.to.have.status(200)\r",
							"})"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BASE_URL}}/api/v1/healthcheck",
					"host": [
						"{{BASE_URL}}"
					],
					"path": [
						"api",
						"v1",
						"healthcheck"
					]
				}
			},
			"response": []
		},
		{
			"name": "List anime",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const res = pm.response.json();\r",
							"pm.environment.set(\"animes\", res.animes);\r",
							"\r",
							"pm.test('response is ok', () => {\r",
							"\tpm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test('should respond with list', () => {\r",
							"\t// Check that field in response\r",
							"\tpm.expect(res.animes).to.be.an.instanceOf(Array);\r",
							"});\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BASE_URL}}/api/v1/animes",
					"host": [
						"{{BASE_URL}}"
					],
					"path": [
						"api",
						"v1",
						"animes"
					],
					"query": [
						{
							"key": "sort",
							"value": "-rating",
							"description": "(ASC or DESC)(column name)",
							"disabled": true
						},
						{
							"key": "page_size",
							"value": "5",
							"description": "Limit",
							"disabled": true
						},
						{
							"key": "page",
							"value": "1",
							"description": "Offset by Limit",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "List anime Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const res = pm.response.json();\r",
							"pm.environment.set(\"animes\", res.animes);\r",
							"\r",
							"pm.test('response is ok', () => {\r",
							"\tpm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test('should respond with list', () => {\r",
							"\t// Check that field in response\r",
							"\tpm.expect(res.animes).to.be.an.instanceOf(Array);\r",
							"});\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BASE_URL}}/api/v1/user_animes/animes/15",
					"host": [
						"{{BASE_URL}}"
					],
					"path": [
						"api",
						"v1",
						"user_animes",
						"animes",
						"15"
					],
					"query": [
						{
							"key": "sort",
							"value": "-rating",
							"description": "(ASC or DESC)(column name)",
							"disabled": true
						},
						{
							"key": "page_size",
							"value": "5",
							"description": "Limit",
							"disabled": true
						},
						{
							"key": "page",
							"value": "1",
							"description": "Offset by Limit",
							"disabled": true
						}
					]
				}
			},
			"response": []
		}
	],
	"variable": [
		{
			"key": "BASE_URL",
			"value": "http://localhost:8081"
		}
	]
}